[[add-remote-metadata]]
=== Add remote metadata

++++
<titleabbrev>add_remote_metadata</titleabbrev>
++++

experimental[]

The `add_remote_metadata` processor enriches events with information from an
external metadata store.

[source,yaml]
-------------------------------------------------------------------------------
processors:
  - add_remote_metadata:
      match_keys: [user.id]
      target: user
      provider: userinfo # Example only.
-------------------------------------------------------------------------------

The fields added to the target field will depend on the provider.

It has the following settings:

`provider`:: The name of the provider used to collect and apply the metadata.
Currently the only provider is the `map` provider.

`match_pids`:: List of fields to lookup for a PID. The processor will
search the list sequentially until the field is found in the current event, and
the PID lookup will be applied to the value of this field.

`target`:: (Optional) Destination prefix where the `remote` object will be
created. The default is the event's root.

`include_fields`:: (Optional) List of fields to add. By default, the processor
will add all the available fields except `remote.env`.

`ignore_missing`:: (Optional) When set to `false`, events that don't contain any
of the fields in match_pids will be discarded and an error will be generated. By
default, this condition is ignored.

`overwrite_keys`:: (Optional) By default, if a target field already exists, it
will not be overwritten and an error will be logged. If `overwrite_keys` is
set to `true`, this condition will be ignored.

==== `map` metadata provider

The `map` metadata provider applies static metadata stored in a hash map. It
requires a `metadata` field to include the static metadata in.

[source,yaml]
-------------------------------------------------------------------------------
processors:
  - add_remote_metadata:
      match_keys: [user.name]
      include_fields: [roles]
      target: user
      provider: map
      metadata:
        Alice:
          roles: ["ceo", "admin"]
        Bob:
          roles: ["hr"]
-------------------------------------------------------------------------------

This would enrich an event

[source,yaml]
-------------------------------------------------------------------------------
{
  "user": {
    "name": "Alice"
  }
}
-------------------------------------------------------------------------------

to include the `user.roles` from the configuration's `metadata` field.

[source,yaml]
-------------------------------------------------------------------------------
{
  "user": {
    "name": "Alice",
    "roles": [
      "ceo", "admin"
    ]
  }
}
-------------------------------------------------------------------------------
