// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package schema

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Section struct {
	_tab flatbuffers.Table
}

func GetRootAsSection(buf []byte, offset flatbuffers.UOffsetT) *Section {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Section{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsSection(buf []byte, offset flatbuffers.UOffsetT) *Section {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Section{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Section) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Section) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Section) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Section) VirtualSize() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Section) MutateVirtualSize(n uint64) bool {
	return rcv._tab.MutateUint64Slot(6, n)
}

func (rcv *Section) Entropy() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Section) MutateEntropy(n float64) bool {
	return rcv._tab.MutateFloat64Slot(8, n)
}

func SectionStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func SectionAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(name), 0)
}
func SectionAddVirtualSize(builder *flatbuffers.Builder, virtualSize uint64) {
	builder.PrependUint64Slot(1, virtualSize, 0)
}
func SectionAddEntropy(builder *flatbuffers.Builder, entropy float64) {
	builder.PrependFloat64Slot(2, entropy, 0.0)
}
func SectionEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
