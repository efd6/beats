// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package schema

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ParserResult struct {
	_tab flatbuffers.Table
}

func GetRootAsParserResult(buf []byte, offset flatbuffers.UOffsetT) *ParserResult {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ParserResult{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsParserResult(buf []byte, offset flatbuffers.UOffsetT) *ParserResult {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ParserResult{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *ParserResult) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ParserResult) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ParserResult) Pe(obj *ExecutableObject) *ExecutableObject {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(ExecutableObject)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *ParserResult) Elf(obj *ExecutableObject) *ExecutableObject {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(ExecutableObject)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *ParserResult) Macho(obj *ExecutableObject) *ExecutableObject {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(ExecutableObject)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *ParserResult) Plan9(obj *ExecutableObject) *ExecutableObject {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(ExecutableObject)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func ParserResultStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func ParserResultAddPe(builder *flatbuffers.Builder, pe flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(pe), 0)
}
func ParserResultAddElf(builder *flatbuffers.Builder, elf flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(elf), 0)
}
func ParserResultAddMacho(builder *flatbuffers.Builder, macho flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(macho), 0)
}
func ParserResultAddPlan9(builder *flatbuffers.Builder, plan9 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(plan9), 0)
}
func ParserResultEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
